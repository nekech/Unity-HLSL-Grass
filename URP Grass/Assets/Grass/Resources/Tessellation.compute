#pragma kernel Tessellation

struct Vertex
{
    float3 position;
    float3 normal;
    float2 uv;
    float4 tangent;
    float3 binormal;
};

RWStructuredBuffer<Vertex> Vertices;
RWStructuredBuffer<int> Triangles;

RWStructuredBuffer<float3> OrigVertices;
RWStructuredBuffer<float3> OrigNormals;
RWStructuredBuffer<float4> OrigTangents;
RWStructuredBuffer<int> OrigTriangles;

int SubDivisionsCount;

float3x3 bitToXform (in uint bit )
{
    float s = float(bit) - 0.5f;

    float3 r1 = float3(s, -0.5f, 0.5f);
    float3 r2 = float3(-0.5f, -s, 0.5f);
    float3 r3 = float3(0, 0, 1);

    return float3x3(r1, r2, r3);
}

float3x3 keyToXform (uint key )
{
    float3x3 xf = float3x3
    (
        1.0f, 0.0f, 0.0f,
        0.0f, 1.0f, 0.0f,
        0.0f, 0.0f, 1.0f
    );

    while ( key > 1u)
    {
        xf = mul(bitToXform(key & 1u), xf);
        key = key >> 1u;
    }

    return xf;
}

float3 berp (in float3 v[3] , in float2 u)
{
    return v[0] + u.x * (v[1] - v[0]) + u.y * (v[2] - v[0]) ;
}

void subd (in uint key , in float3 v_in[3] , out float3 v_out[3])
{
    float3x3 xf = keyToXform ( key ) ;
    float2 u1 = mul(xf, float3(0 , 0, 1)).xy ;
    float2 u2 = mul(xf, float3(1 , 0, 1)).xy ;
    float2 u3 = mul(xf, float3(0 , 1, 1)).xy ;
    v_out[0] = berp( v_in , u1 );
    v_out[1] = berp( v_in , u2 );
    v_out[2] = berp( v_in , u3 );
}

[numthreads(3,1,1)]
void Tessellation (uint3 id : SV_DispatchThreadID)
{
    float3 triangleVertices[3];

    triangleVertices[0] = OrigVertices[OrigTriangles[id.x * 3 + 0]];
    triangleVertices[1] = OrigVertices[OrigTriangles[id.x * 3 + 1]];
    triangleVertices[2] = OrigVertices[OrigTriangles[id.x * 3 + 2]];

    float3 origNormal = OrigNormals[OrigTriangles[id.x * 3 + 0]];
    float4 origTangent = OrigTangents[OrigTriangles[id.x * 3 + 0]];

    for (int i = 0; i < pow(2, SubDivisionsCount); ++i)
    {
        float3 subVertices[3];

        subd(i, triangleVertices, subVertices);

        int verticesIndex = id.x*(3 * pow(2, SubDivisionsCount)) + i*3;

        Vertices[verticesIndex + 0].position = subVertices[0];
        Triangles[verticesIndex + 0] = verticesIndex + 0;

        Vertices[verticesIndex + 1].position = subVertices[1];
        Triangles[verticesIndex + 1] = verticesIndex + 1;

        Vertices[verticesIndex + 2].position = subVertices[2];
        Triangles[verticesIndex + 2] = verticesIndex + 2;

        Vertices[verticesIndex + 0].normal = origNormal;
        Vertices[verticesIndex + 1].normal = origNormal;
        Vertices[verticesIndex + 2].normal = origNormal;

        Vertices[verticesIndex + 0].tangent = origTangent;
        Vertices[verticesIndex + 1].tangent = origTangent;
        Vertices[verticesIndex + 2].tangent = origTangent;

        float3 binormal = cross(origNormal, origTangent.xyz) * origTangent.w;

        Vertices[verticesIndex + 0].binormal = binormal;
        Vertices[verticesIndex + 1].binormal = binormal;
        Vertices[verticesIndex + 2].binormal = binormal;
    }
}
